const unhomoglyph = require("unhomoglyph");

const WhitelistedWords = [
    // ... (same as above, omitted for brevity)
];

const superscriptMap = {
    '‚Åø': 'n', '‚Å±': 'i', '·µç': 'g', '·µÉ': 'a', ' ≥': 'r', 'À¢': 's',
    '·µâ': 'e', '·µí': 'o', '·µá': 'b'
};
const subscriptMap = {
    '‚Çô': 'n', '·µ¢': 'i', '‚Çâ': 'g', '‚Çê': 'a', '·µ£': 'r', '‚Çõ': 's',
    '‚Çë': 'e', '‚Çí': 'o', '·µ¶': 'b'
};
const emojiLetterMap = {
    'üÖΩ': 'n', 'üÖò': 'i', 'üÖñ': 'g', 'üÖê': 'a', 'üÖ°': 'r', 'üÖ¢': 's',
    'üá≥': 'n', 'üáÆ': 'i', 'üá¨': 'g', 'üá¶': 'a', 'üá∑': 'r', 'üá∏': 's',
    'üá™': 'e', 'üá¥': 'o', 'üáß': 'b'
};

function normalizeUnicode(char) {
    const codePoint = char.codePointAt(0);
    let normalized = char.normalize('NFKD'); // Decompose into base + diacritics
    let baseChar = [...normalized].find(c => /[a-zA-Z]/.test(c)) || char; // Take first letter, fallback to original

    // Adjust based on specific Unicode blocks
    if (codePoint >= 0x00A0 && codePoint <= 0x00FF) { // Latin-1 Supplement
        return baseChar.toLowerCase();
    } else if (codePoint >= 0x0100 && codePoint <= 0x024F) { // Latin Extended-A/B
        return baseChar.toLowerCase();
    } else if (codePoint >= 0x0400 && codePoint <= 0x04FF) { // Cyrillic
        const cyrillicMap = {
            '–ê': 'a', '–ë': 'b', '–í': 'v', '–ì': 'g', '–î': 'd', '–ï': 'e', '–Å': 'e', '–ñ': 'zh',
            '–ó': 'z', '–ò': 'i', '–ô': 'y', '–ö': 'k', '–õ': 'l', '–ú': 'm', '–ù': 'n', '–û': 'o',
            '–ü': 'p', '–†': 'r', '–°': 's', '–¢': 't', '–£': 'u', '–§': 'f', '–•': 'kh', '–¶': 'ts',
            '–ß': 'ch', '–®': 'sh', '–©': 'shch', '–™': '', '–´': 'y', '–¨': '', '–≠': 'e', '–Æ': 'yu',
            '–Ø': 'ya'
        };
        return cyrillicMap[char.toUpperCase()] || baseChar.toLowerCase();
    } else if (codePoint >= 0x0370 && codePoint <= 0x03FF) { // Greek
        const greekMap = {
            'Œë': 'a', 'Œí': 'b', 'Œì': 'g', 'Œî': 'd', 'Œï': 'e', 'Œñ': 'z', 'Œó': 'h', 'Œò': 'th',
            'Œô': 'i', 'Œö': 'k', 'Œõ': 'l', 'Œú': 'm', 'Œù': 'n', 'Œû': 'x', 'Œü': 'o', 'Œ†': 'p',
            'Œ°': 'r', 'Œ£': 's', 'Œ§': 't', 'Œ•': 'u', 'Œ¶': 'ph', 'Œß': 'ch', 'Œ®': 'ps', 'Œ©': 'o'
        };
        return greekMap[char.toUpperCase()] || baseChar.toLowerCase();
    } else if (codePoint >= 0x1D400 && codePoint <= 0x1D7FF) { // Mathematical Alphanumeric Symbols
        if (codePoint >= 0x1D400 && codePoint <= 0x1D419) { // Uppercase A-Z
            return String.fromCharCode(codePoint - 0x1D38F).toLowerCase();
        } else if (codePoint >= 0x1D422 && codePoint <= 0x1D43B) { // Lowercase a-z
            return String.fromCharCode(codePoint - 0x1D361).toLowerCase();
        }
    } else if (codePoint >= 0x2070 && codePoint <= 0x209F) { // Superscripts
        return superscriptMap[char] || baseChar.toLowerCase();
    } else if (codePoint >= 0x2080 && codePoint <= 0x208E) { // Subscripts
        return subscriptMap[char] || baseChar.toLowerCase();
    }

    return baseChar.toLowerCase();
}

function replaceDiscordEmoji(text) {
    return text.replace(/<a?:[a-zA-Z0-9_]+:\d+>|<emoji>/g, '');
}

function removeTags(text) {
    return text.replace(/<[^>]+>/g, '');
}

function normalizeIndicators(text) {
    return [...text].map(char => {
        const unhomoglyphResult = unhomoglyph(char);
        return unhomoglyphResult || normalizeUnicode(char) || char;
    }).join('');
}

function ultraCleanText(text) {
    const tagStripped = removeTags(text);
    const emojiStripped = replaceDiscordEmoji(tagStripped);
    const normalized = normalizeIndicators(emojiStripped)
        .normalize('NFKD')
        .replace(/[\u0300-\u036F\u1AB0-\u1AFF\u1DC0-\u1DFF]/gu, '') // Remove diacritics
        .replace(/[^a-zA-Z0-9\s]/gu, '')
        .toLowerCase();
    return normalized;
}

function isNWords(message) {
    const partiallyCleaned = ultraCleanText(message);
    const words = partiallyCleaned.split(/\s+/);
    for (let i = 0; i < words.length; i++) {
        let combinedWord = words[i];
        const finalCleanedWord = unhomoglyph(combinedWord) || combinedWord;
        if (WhitelistedWords.includes(finalCleanedWord)) {
            continue;
        }
        if (nwordPatterns.some(pattern => pattern.test(finalCleanedWord))) {
            return true;
        }
        for (let j = i + 1; j < words.length; j++) {
            combinedWord += words[j];
            const finalCombinedWord = unhomoglyph(combinedWord) || combinedWord;
            if (WhitelistedWords.includes(finalCleanedWord)) {
                break;
            }
            if (nwordPatterns.some(pattern => pattern.test(finalCombinedWord))) {
                return true;
            }
        }
    }
    const allText = partiallyCleaned.replace(/\s+/g, '');
    const wordsInText = allText.split(/[^a-zA-Z0-9]+/);
    for (const word of wordsInText) {
        if (!WhitelistedWords.includes(word) && nwordPatterns.some(pattern => pattern.test(word))) {
            return true;
        }
    }
    return false;
}

const nwordPatterns = [
    /n[1il!]*[i1l!][g96q…¢‘å]+[ae3@4Œ±–∞√•√¢√°]*(?:r[s]*)?/iu,
    /n[1il!]*[i1l!][g96q…¢‘å]*[-‚Äì‚Äî]/iu,
    /n[1il!]+[i1l!]+[g96q…¢‘å]+/iu,
    /n[1il!]*[e3@4Œ±–∞√•√¢√°][g96q…¢‘å]+[a3@4Œ±–∞√•√¢√°](?:r[s]*)?/iu,
    /n[1il!]*[i1l!][c—Å][h…¶][g96q…¢‘å]+[a3@4Œ±–∞√•√¢√°]/iu,
    /n[1il!]*[e3@4Œ±–∞√•√¢√°][g96q…¢‘å]+[a3@4Œ±–∞√•√¢√°]/iu,
    /n[1il!]*[i1l!][b6]+[b6][a3@4Œ±–∞√•√¢√°]/iu,
    /n[1il!]*[i1l!m]*er/iu,
    /n[1il!]*[i1l!][c—Å][h…¶][go√≥√≤√¥√µ≈ç≈è≈ë∆°·ªç·ªè√µ·ªë·ªì·ªó·ªï·ªô·ªõ·ªù·ª°·ªü·ª£]/iu,
    /er\b/iu
];

module.exports = { isNWords, ultraCleanText };